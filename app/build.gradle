apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.firebase.firebase-perf'
apply plugin: 'io.fabric'

File keystoreProperties = rootProject.file("keystore.properties")
def props = new Properties()
if (keystoreProperties.exists()) {
    props.load(new FileInputStream(keystoreProperties))
} else {
    props['keystorefile'] = 'none'
}

android {
    dexOptions {
        jumboMode true
        javaMaxHeapSize "4g"
    }
    
    packagingOptions {
        exclude 'LICENSE'
        exclude 'README.md'
        exclude 'Other/'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }
    
    compileSdkVersion parseSdkVersion(project.COMPILE_SDK)	

    defaultConfig {
        applicationId "com.klinker.android.twitter_l"
        targetSdkVersion parseSdkVersion(project.TARGET_SDK)
        minSdkVersion parseSdkVersion(project.MIN_SDK)
        versionCode System.getenv("BUILD_NUMBER") as Integer ?: Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        multiDexEnabled true
        
        File secretsExists = new File("secrets.properties")
        if (secretsExists.exists()) {
            def secretsFile = rootProject.file('secrets.properties')
            def secrets = new Properties()
            secrets.load(new FileInputStream(secretsFile))

            buildConfigField "String", "CONSUMER_KEY", secrets['CONSUMER_KEY']
            buildConfigField "String", "CONSUMER_SECRET", secrets['CONSUMER_SECRET']
            buildConfigField "String", "YOUTUBE_API_KEY", secrets['YOUTUBE_API_KEY']
            buildConfigField "String", "TWEETMARKER_KEY", secrets['TWEETMARKER_KEY']
            buildConfigField "String", "TWITLONGER_KEY", secrets['TWITLONGER_KEY']
            buildConfigField "String", "GIPHY_API_KEY", secrets['GIPHY_KEY']
            buildConfigField "String", "ARTICLE_API_KEY", secrets['ARTICLE_KEY']
            buildConfigField "String", "MERCURY_API_KEY", secrets['MERCURY_KEY']

            buildConfigField "String", "CONSUMER_KEY_OLD_1", secrets['CONSUMER_KEY_OLD_1'] != null ? secrets['CONSUMER_KEY_OLD_1'] : "\"This is optional.\""
            buildConfigField "String", "CONSUMER_SECRET_OLD_1", secrets['CONSUMER_SECRET_OLD_1'] != null ? secrets['CONSUMER_SECRET_OLD_1'] : "\"This is optional.\""
            buildConfigField "String", "CONSUMER_KEY_OLD_2", secrets['CONSUMER_KEY_OLD_2'] != null ? secrets['CONSUMER_KEY_OLD_2'] : "\"This is optional.\""
            buildConfigField "String", "CONSUMER_SECRET_OLD_2", secrets['CONSUMER_SECRET_OLD_2'] != null ? secrets['CONSUMER_SECRET_OLD_2'] : "\"This is optional.\""
            buildConfigField "String", "CONSUMER_KEY_OLD_3", secrets['CONSUMER_KEY_OLD_3'] != null ? secrets['CONSUMER_KEY_OLD_3'] : "\"This is optional.\""
            buildConfigField "String", "CONSUMER_SECRET_OLD_3", secrets['CONSUMER_SECRET_OLD_3'] != null ? secrets['CONSUMER_SECRET_OLD_3'] : "\"This is optional.\""
        } else {
            buildConfigField "String", "CONSUMER_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "CONSUMER_SECRET", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "YOUTUBE_API_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "TWEETMARKER_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "TWITLONGER_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "GIPHY_API_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "ARTICLE_API_KEY", "\"View Talon's readme to learn about inserting your keys.\""
            buildConfigField "String", "MERCURY_API_KEY", "\"View Talon's readme to learn about inserting your keys.\""

            buildConfigField "String", "CONSUMER_KEY_OLD_1", "\"This is optional.\""
            buildConfigField "String", "CONSUMER_SECRET_OLD_1", "\"This is optional.\""
            buildConfigField "String", "CONSUMER_KEY_OLD_2", "\"This is optional.\""
            buildConfigField "String", "CONSUMER_SECRET_OLD_2", "\"This is optional.\""
            buildConfigField "String", "CONSUMER_KEY_OLD_3", "\"This is optional.\""
            buildConfigField "String", "CONSUMER_SECRET_OLD_3", "\"This is optional.\""
        }
    }
    
    File keystore = new File(props['keystorefile'])
    if (keystore.exists()) {
        signingConfigs {
            release {
                storeFile keystore
                storePassword props['keystorepassword']
                keyAlias props['keyalias']
                keyPassword props['keypassword']
            }
            debug {
                storeFile file("../Other/debug.keystore")
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }

        buildTypes {
            debug {
                signingConfig signingConfigs.debug
            }
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    } else {
        signingConfigs {
            debug {
                storeFile file("../Other/debug.keystore")
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }
        buildTypes {
            debug {
                signingConfig signingConfigs.debug
            }
        }
    }
    
    sourceSets {
        androidTest {
            setRoot('src/test')
        }
    }
    
    lintOptions {
        ignore "InnerClasses"
        abortOnError false
    }
    
    aaptOptions {
        noCompress 'apk'
    }
    
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
}

dependencies {

    wearApp project(':wear')
    
    implementation "com.android.support:appcompat-v7:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:cardview-v7:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:recyclerview-v7:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:support-emoji:${ANDROID_SUPPORT_VERSION}"
    implementation "com.android.support:design:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:customtabs:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:preference-v7:$ANDROID_SUPPORT_VERSION"
    implementation "com.android.support:preference-v14:$ANDROID_SUPPORT_VERSION"
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.klinkerapps:link_builder:2.0.3'
    implementation 'com.klinkerapps:peekview:1.2.3'
    implementation 'com.klinkerapps:simple_videoview:1.2.4'
    implementation 'com.klinkerapps:launcher-apis:1.1.0'
    implementation 'com.klinkerapps:android-transcoder:1.0.1'
    implementation 'com.klinkerapps:article_viewer-glide3:0.24.9'
    implementation 'com.klinkerapps:drag-dismiss-activity:1.5.1'
    implementation 'com.klinkerapps:floating-tutorial:1.0.4'
    implementation 'com.github.bumptech.glide:okhttp3-integration:1.5.0@aar'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.github.bumptech.glide:glide:3.7.0'
    implementation 'com.firebase:firebase-jobdispatcher:0.8.5'
    implementation 'com.afollestad:easyvideoplayer:0.3.0'
    implementation 'com.github.halilozercan:BetterVideoPlayer:1.1.0'
    implementation 'com.github.apl-devs:appintro:v4.2.0'
    implementation 'de.timroes.android:EnhancedListView:0.3.2@aar'
    implementation 'com.google.android.apps.dashclock:dashclock-api:2.0.0'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    implementation 'com.melnykov:floatingactionbutton:1.3.0'
    implementation 'com.astuetz:pagerslidingtabstrip:1.0.1'
    implementation 'com.flipboard:bottomsheet-core:1.5.0'
    implementation 'com.github.yalantis:ucrop:2.2.2'
    implementation 'me.leolin:ShortcutBadger:1.1.14@aar'
    implementation 'com.github.ajalt.reprint:core:2.9.2@aar'
    implementation 'com.github.ajalt.reprint:reprint_spass:2.9.2@aar'
    implementation 'com.github.fiskurgit:ChipCloud:3.0.3'
    implementation 'com.afollestad.material-dialogs:core:0.9.4.5'
    implementation files('lib/YouTubeAndroidPlayerApi.jar')
    // version 1.2.2
    implementation files('lib/twitter4j-fork.jar')
    implementation files('lib/twitter4j-stream-fork.jar')
    implementation(name: 'datetimepicker', ext: 'aar')
    implementation(name: 'sectioned-recyclerview', ext: 'aar')
    implementation(name: 'material-camera', ext: 'aar')
    
    implementation project(':searchview')
    implementation project(':shared_assets')
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion ANDROID_SUPPORT_VERSION
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'
